// tiles.fab, tiles function set
// Concerned with tiles, nametables, and background palettes

// charmaps can be used to get a nice syntax for defining levels.
charmap(" |ABCDEFGHIJKLM\n_\0NOPQRSTUVWXYZ0123456789.,:;+-=[]!?}l)(`~@#%&{\\><^vx/adh*mst", '\0', 176)

// The levels are defined here
data /levels
    [] level1
        ("#$#$#$#$#$#$#.#$#$#$.$#$#$#$#$#$#....$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "@&@&@&@&@&@&@.@&@&@&.&@&@&@&@&@&@....&@&@&@&@&@&@&@&@&@&@&@&@&@&"
         "#$#.#$#$#$#....$.$......#$#$#$#$#....$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "#$#.#...#.#$#.#$.$...........$$$#....&@&@&@&@&@&@&@&@&@&@&@&@&@&"
         "#$#...#.#...#..$#$......#$#$.$#$#....$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "#$#$#$#.#$#.#$...$.$#$#$#$#$.$#$#....&@&@&@&@&@&@&@&@&@&@&@&@&@&"
         "#$#.....#....$.$#$.$#$#$#$#$.$#$#....$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "#$#.#$#$#.#$#$.$#$.$#$#$#$#$.$#$#....&@&@&@&@&@&@&@&@&@&@&@&@&@&"
         "#$#.#......$.......$#$#$#$#$.$#$#....$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "#$#...#.#$#$.$#$#$.............................................."
         "#$#.#$#.#........$.$#$#$#$.$#$#$................................"
         "........#$#$#$#$#$....#$#$.$#$#$................#$#$#$.........."
         "#$#.#.#....$.$.....$#.#$.....$#$.....................$.........."
         "#$#.#.#$#$#$.$#$#$#$#.#$.....$#$.....................$.........."
         "#$#.#...............#.#$.....$#$.....................$.........."
         "#$#.#$#.#.#.#$#$..#.#.#$#$.$#$#$.....................$.........."
         "#$#.#...#$#.#.#$........#$.$#$#$........#$#$#$#$#$#$#$.........."
         "#$#$#.#.#...#.......#$#.#$.$#$#$................................"
         "......#$#$#$#.#$#$#$#$#.#$.$#$#$................................"
         "#$#.#$#.....#.#$#$#$....#$.$#$#$............+=+=................"
         "#$#.....#$#$#.#$#$#$....#$.$#$#$........-_-_-_-_-_.............."
         "#$#.#$.$#.........#$....#$.$#$#$..........+=+=+=+=+=............"
         "#$#$#$.$..#$.$....#$#.#$#$.$#$#$..............-_-_.............."
         "#$#....$.$#..$....#$#.#$....#$#$................................"
         "#$#.#$#$.$#$.$....#$#.#$....#$#$................................"
         "#$#.#.#$.$.$......#$#.......#$#$................................"
         "#$#.#....$.$......#$#$#$#.#$#$#$................................"
         "#$#....$.$.$#$#$#.#$#$#$#.#$#$#$................................"
         "#$#$#$#$.$#$#$#$#.#$#$#$#.#$#$#$................................"
         "#$#$#$#$.$#$#$#$#.#$#$#$#.#$#$#$................................"
         "................................................................"
         "................................................................"
         "................................................................"
         "............................+=.................................."
         "..........................-_-_-_................................"
         "..........................+=+=+=................................"
         "............................-_-_................................"
         "................................................................"
         "..................#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$.............."
         ".................................................$.............."
         ".................................................$.............."
         ".................................................$.............."
         ".................................................$.............."
         ".................................................$.............."
         ".................................................$.............."
         ".........................................#$#.....$#$#$#$........"
         "........................................$...........#..........."
         "........................................$...........#..........."
         "........................................$...........#..........."
         "........................................$...........#..........."
         "........................................$...........#..........."
         ".......................................#$#$#$#$#$#$$#..........."
         "....................................................#..........."
         "....................................................#..........."
         "....................................................#..........."
         "................................................................"
         "................................................................"
         "................................................................"
         "................................................................"
         "................................................................")

fn tiles.load_nametable(U nametable) // takes 0 1 2 or 3
    // Tell the NES which VRAM address we want to upload to
    ppu_reset_addr($2000 + (UU(nametable) << 10)) // $2000, $2400, $2800, $2C00
    U i_start = (nametable & $01) << 5 // 0 or 32
    UU j_start = UU(U(nametable & $02) * U($0f)) // 0 or 30

    // Upload the tile data
    for UU j = j_start; j < 30 + j_start; j += 1 // either 0<=j<30 or 30<=j<60 based on which nametable
        for U i = i_start; i < 32 + i_start; i += 1 // either 0<=i<32 or 32<=i<64 based on which nametable
            {PPUDATA}((level_ptr + j * 64)[i])

    // Then the attributes
    for U i = 0; i < 64; i += 1
        {PPUDATA}((nametable << 6) | (nametable << 4) | (nametable << 2) | (nametable))

fn tiles.load_level()
    tiles.load_nametable(%00)
    tiles.load_nametable(%01)
    tiles.load_nametable(%10)
    tiles.load_nametable(%11)

fn tiles.set_at(UU x, UU y, U tile)
    // Handle under/overflow
    x &= $01ff
    if (y & $8000) != 0
        y += 480
    else if y >= 480
        y -= 480
    
    // Divide by 8 to get the tile position
    x >>= 3
    y >>= 3
    
    // Which nametable
    U pnmc = U(x) >> 5
    x &= %11111
    if y >= 30
        y -= 30
        pnmc |= %10
            
    // Calculate the address, $2000, $2400, $2800, $2C00 are each nametable, and then each one is 32 wide
    UU adr = $2000 + (y << 5) + x + (UU(pnmc) << 10)
    ppu_reset_addr(adr)
    {PPUDATA}(tile)

fn tiles.upload_sheets()
    // Upload tilesheets
    state(M30_CHR(0))
    ppu_set_addr($0000)
    ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_0, 0), 0)
    // state(M30_CHR(1))
    // ppu_set_addr($0000)
    // ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_1, 0), 0)
    // state(M30_CHR(2))
    // ppu_set_addr($0000)
    // ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_2, 0), 0)
    // state(M30_CHR(3))
    // ppu_set_addr($0000)
    // ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_3, 0), 0)

    state(M30_CHR(0))

fn tiles.get_at(UU x, UU y) U
    // Handle under/overflow
    px &= $01ff
    if (y & $8000) != 0
        y += 480
    else if y >= 480
        y -= 480
    
    // Divide by 8 to get the tile position
    x >>= 3
    y >>= 3

    // Return the tile
    return (level_ptr + y * 64)[U(x)]

// Define the tileset (commonly called CHR)
data /pbz
    [] chr_0
         file(pbz, "tiles.png")

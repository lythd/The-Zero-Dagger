vars /game_vars
    CCC/levels level_ptr
    U px = 128
    U py = 128
    U sx = 0
    U sy = 0
    U nmc = %00000000 // either %00 %01 %10 %11, name table coordinates

// charmaps can be used to get a nice syntax for defining levels.
charmap(".,-_#$")

// The levels are defined here:
data /levels
    [] level1
        ("#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "#$#.#$#$#$#....$.$-_-_-_#$#$#$#$"
         "#$#.#...#.#$#.#$.$-_-_-_.....$$$"
         "#$#...#.#...#..$#$-_-_-_#$#$.$#$"
         "#$#$#$#.#$#.#$...$.$#$#$#$#$.$#$"
         "#$#.....#....$.$#$.$#$#$#$#$.$#$"
         "#$#.#$#$#.#$#$.$#$.$#$#$#$#$.$#$"
         "#$#.#......$.......$#$#$#$#$.$#$"
         "#$#...#.#$#$.$#$#$...........$#$"
         "#$#.#$#.#........$.$#$#$#$.$#$#$"
         "#$#.....#$#$#$#$#$....#$#$.$#$#$"
         "#$#.#.#....$.$.....$#.#$-_-_-$#$"
         "#$#.#.#$#$#$.$#$#$#$#.#$-_-_-$#$"
         "#$#.#...............#.#$-_-_-$#$"
         "#$#.#$#.#.#.#$#$..#.#.#$#$.$#$#$"
         "#$#.#...#$#.#.#$........#$.$#$#$"
         "#$#$#.#.#...#.......#$#.#$.$#$#$"
         "#$#...#$#$#$#.#$#$#$#$#.#$.$#$#$"
         "#$#.#$#.....#.#$#$#$-_-_#$.$#$#$"
         "#$#.....#$#$#.#$#$#$-_-_#$.$#$#$"
         "#$#.#$.$#.....-_-_#$-_-_#$.$#$#$"
         "#$#$#$.$..#$.$-_-_#$#.#$#$.$#$#$"
         "#$#....$.$#..$-_-_#$#.#$-_-_#$#$"
         "#$#.#$#$.$#$.$-_-_#$#.#$-_-_#$#$"
         "#$#.#.#$.$.$-_-_-_#$#...-_-_#$#$"
         "#$#.#....$.$-_-_-_#$#$#$#.#$#$#$"
         "#$#....$.$.$#$#$#.#$#$#$#.#$#$#$"
         "#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$"
         "#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$")

fn load_level()
    // Tell the NES which VRAM address we want to upload to:
    ppu_reset_addr($2000)

    // Upload the tile data:
    for UU i = 0; i < 960; i += 1
        {PPUDATA}(level_ptr{i})

    // Then the attributes:
    for U i = 0; i < 8; i += 1
        {PPUDATA}(%11111111)
    for U j = 0; j < 6; j += 1
        {PPUDATA}(%10101010)
        for U i = 0; i < 6; i += 1
            {PPUDATA}(%00000000)
        {PPUDATA}(%01010101)
    for U i = 0; i < 8; i += 1
        {PPUDATA}(%11111111)

nmi main_nmi()
    // Update OAM and poll the pads:
    ppu_upload_oam_poll_pads(0)

    // Turn on rendering:
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)

    // Reset the scroll
    if sx == 255
        nmc ^= %00000001 // flip x nametable before rollover
    if sy == 254
        nmc ^= %00000010 // flip y nametable before rollover
    if sx == 255 || sy == 254
        {PPUCTRL}(PPUCTRL_NMI_ON | nmc) // update active nametable
    sx += 1
    sy += 2
    ppu_reset_scroll(sx, sy) // set scroll within nametable to sx, sy
    
mode main()
: nmi main_nmi
    // Set the palette:
    palette = example_palette
    ppu_upload_palette()

    // Set and load the level:
    level_ptr = @level1
    load_level()

    // Upload tilesheets
    
    state(M30_CHR(0))
    ppu_set_addr($0000)
    ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_0, 0), 0)
    // state(M30_CHR(1))
    // ppu_set_addr($0000)
    // ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_1, 0), 0)
    // state(M30_CHR(2))
    // ppu_set_addr($0000)
    // ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_2, 0), 0)
    // state(M30_CHR(3))
    // ppu_set_addr($0000)
    // ppu_upload_pbz.chunks(ppu_upload_pbz.chunks(@chr_3, 0), 0)

    state(M30_CHR(0))

    // Tell the NES to trigger NMI once per frame:
    {PPUCTRL}(PPUCTRL_NMI_ON | nmc)

    // Wait forever, one frame at a time:
    while true
        update_pads()
        move_player() 
        update_sprites()
        nmi

fn update_sprites()
    // Our stack index into OAM:
    U i = 0

    // Push a sprite:
    set_oam_x(i, px)     // x-position
    set_oam_y(i, py - 1) // y-position
    set_oam_p(i, $20)    // tile
    set_oam_a(i, 0)      // options
    i += 4

    // Clear the remainder of OAM
    hide_oam(i)

fn move_player()
    // Move the player horizontally based on button presses:
    if pads[0].held & BUTTON_LEFT
        if tile_at(px - 1, py) == '.' && tile_at(px - 1, py + 7) == '.'
            px -= 1
    else if pads[0].held & BUTTON_RIGHT
        if tile_at(px + 8, py) == '.' && tile_at(px + 8, py + 7) == '.'
            px += 1

    // Move the player vertically based on button presses:
    if pads[0].held & BUTTON_UP
        if tile_at(px, py - 1) == '.' && tile_at(px + 7, py - 1) == '.'
            py -= 1
    else if pads[0].held & BUTTON_DOWN
        if tile_at(px, py + 8) == '.' && tile_at(px + 7, py + 8) == '.'
            py += 1

fn tile_at(U x, U y) U
    // Divide by 8 to get the tile position:
    x >>= 3
    y >>= 3

    // Return the tile:
    return (level_ptr + UU(y * 32))[x]

// Define the tileset (commonly called CHR):
data /pbz
    [] chr_0
         file(pbz, "tiles.png")
